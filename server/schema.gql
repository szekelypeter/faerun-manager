# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Character {
  id: ID!
  name: String!
  level: Int!
  details: String
  campaignId: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  campaign: Campaign!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Campaign {
  id: ID!
  name: String!
  details: String
  createdAt: DateTime!
  updatedAt: DateTime!
  characters(
    """Specify to filter the records returned."""
    filter: CharacterFilter = {}

    """Specify to sort results."""
    sorting: [CharacterSort!] = [{field: updatedAt, direction: DESC}]
  ): [Character!]!
}

input CharacterFilter {
  and: [CharacterFilter!]
  or: [CharacterFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  level: IntFieldComparison
  details: StringFieldComparison
  campaignId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input IntFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Int
  neq: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int!]
  notIn: [Int!]
  between: IntFieldComparisonBetween
  notBetween: IntFieldComparisonBetween
}

input IntFieldComparisonBetween {
  lower: Int!
  upper: Int!
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input CharacterSort {
  field: CharacterSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CharacterSortFields {
  id
  name
  level
  details
  campaignId
  createdAt
  updatedAt
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type CampaignDeleteResponse {
  id: ID
  name: String
  details: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type CampaignConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Campaign!]!
}

type CampaignAggregateGroupBy {
  id: ID
  name: String
  details: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CampaignCountAggregate {
  id: Int
  name: Int
  details: Int
  createdAt: Int
  updatedAt: Int
}

type CampaignSumAggregate {
  id: Float
}

type CampaignAvgAggregate {
  id: Float
}

type CampaignMinAggregate {
  id: ID
  name: String
  details: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CampaignMaxAggregate {
  id: ID
  name: String
  details: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ShortRestResult {
  healthRestored: Int!
}

type CharacterDeleteResponse {
  id: ID
  name: String
  level: Int
  details: String
  campaignId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type CharacterConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Character!]!
}

type CharacterAggregateGroupBy {
  id: ID
  name: String
  level: Int
  details: String
  campaignId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type CharacterCountAggregate {
  id: Int
  name: Int
  level: Int
  details: Int
  campaignId: Int
  createdAt: Int
  updatedAt: Int
}

type CharacterSumAggregate {
  id: Float
  level: Float
  campaignId: Float
}

type CharacterAvgAggregate {
  id: Float
  level: Float
  campaignId: Float
}

type CharacterMinAggregate {
  id: ID
  name: String
  level: Int
  details: String
  campaignId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type CharacterMaxAggregate {
  id: ID
  name: String
  level: Int
  details: String
  campaignId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type Query {
  character(
    """The id of the record to find."""
    id: ID!
  ): Character
  characters(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: CharacterFilter = {}

    """Specify to sort results."""
    sorting: [CharacterSort!] = [{field: updatedAt, direction: DESC}]
  ): CharacterConnection!
  campaign(
    """The id of the record to find."""
    id: ID!
  ): Campaign
  campaigns(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: CampaignFilter = {}

    """Specify to sort results."""
    sorting: [CampaignSort!] = [{field: updatedAt, direction: DESC}]
  ): CampaignConnection!
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

input CampaignFilter {
  and: [CampaignFilter!]
  or: [CampaignFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  details: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  characters: CampaignFilterCharacterFilter
}

input CampaignFilterCharacterFilter {
  and: [CampaignFilterCharacterFilter!]
  or: [CampaignFilterCharacterFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  level: IntFieldComparison
  details: StringFieldComparison
  campaignId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input CampaignSort {
  field: CampaignSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CampaignSortFields {
  id
  name
  details
  createdAt
  updatedAt
}

type Mutation {
  characterLongRest(id: Int!): Boolean!
  characterShortRest(id: Int!): ShortRestResult!
  setCampaignOnCharacter(input: SetCampaignOnCharacterInput!): Character!
  createOneCharacter(input: CreateOneCharacterInput!): Character!
  createManyCharacters(input: CreateManyCharactersInput!): [Character!]!
  updateOneCharacter(input: UpdateOneCharacterInput!): Character!
  updateManyCharacters(input: UpdateManyCharactersInput!): UpdateManyResponse!
  deleteOneCharacter(input: DeleteOneCharacterInput!): CharacterDeleteResponse!
  deleteManyCharacters(input: DeleteManyCharactersInput!): DeleteManyResponse!
  addCharactersToCampaign(input: AddCharactersToCampaignInput!): Campaign!
  setCharactersOnCampaign(input: SetCharactersOnCampaignInput!): Campaign!
  removeCharactersFromCampaign(input: RemoveCharactersFromCampaignInput!): Campaign!
  createOneCampaign(input: CreateOneCampaignInput!): Campaign!
  createManyCampaigns(input: CreateManyCampaignsInput!): [Campaign!]!
  updateOneCampaign(input: UpdateOneCampaignInput!): Campaign!
  updateManyCampaigns(input: UpdateManyCampaignsInput!): UpdateManyResponse!
  deleteOneCampaign(input: DeleteOneCampaignInput!): CampaignDeleteResponse!
  deleteManyCampaigns(input: DeleteManyCampaignsInput!): DeleteManyResponse!
}

input SetCampaignOnCharacterInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneCharacterInput {
  """The record to create"""
  character: CreateCharacter!
}

input CreateCharacter {
  id: ID
  name: String
  level: Int
  details: String
  campaignId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input CreateManyCharactersInput {
  """Array of records to create"""
  characters: [CreateCharacter!]!
}

input UpdateOneCharacterInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCharacter!
}

input UpdateCharacter {
  id: ID
  name: String
  level: Int
  details: String
  campaignId: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input UpdateManyCharactersInput {
  """Filter used to find fields to update"""
  filter: CharacterUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCharacter!
}

input CharacterUpdateFilter {
  and: [CharacterUpdateFilter!]
  or: [CharacterUpdateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  level: IntFieldComparison
  details: StringFieldComparison
  campaignId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input DeleteOneCharacterInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyCharactersInput {
  """Filter to find records to delete"""
  filter: CharacterDeleteFilter!
}

input CharacterDeleteFilter {
  and: [CharacterDeleteFilter!]
  or: [CharacterDeleteFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  level: IntFieldComparison
  details: StringFieldComparison
  campaignId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input AddCharactersToCampaignInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetCharactersOnCampaignInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveCharactersFromCampaignInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneCampaignInput {
  """The record to create"""
  campaign: CreateCampaign!
}

input CreateCampaign {
  id: ID
  name: String
  details: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CreateManyCampaignsInput {
  """Array of records to create"""
  campaigns: [CreateCampaign!]!
}

input UpdateOneCampaignInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCampaign!
}

input UpdateCampaign {
  id: ID
  name: String
  details: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UpdateManyCampaignsInput {
  """Filter used to find fields to update"""
  filter: CampaignUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCampaign!
}

input CampaignUpdateFilter {
  and: [CampaignUpdateFilter!]
  or: [CampaignUpdateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  details: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}

input DeleteOneCampaignInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyCampaignsInput {
  """Filter to find records to delete"""
  filter: CampaignDeleteFilter!
}

input CampaignDeleteFilter {
  and: [CampaignDeleteFilter!]
  or: [CampaignDeleteFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  details: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
}